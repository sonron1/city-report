{% extends 'base.html.twig' %}

{% block title %}Nouveau signalement - CityFlow{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <style>
        #map {
            height: 400px;
            width: 100%;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }
        .map-container {
            position: relative;
        }
        .coordinates-container {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 20px;
        }
        .card-header {
            font-weight: 600;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4 mb-5">
        <!-- Fil d'Ariane -->
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('app_home') }}">Accueil</a></li>
                <li class="breadcrumb-item"><a href="{{ path('app_signalements') }}">Signalements</a></li>
                <li class="breadcrumb-item active" aria-current="page">Nouveau signalement</li>
            </ol>
        </nav>

        <div class="row">
            <div class="col-lg-10 mx-auto">
                {% for label, messages in app.flashes %}
                    {% for message in messages %}
                        <div class="alert alert-{% if label == 'error' %}danger{% else %}{{ label }}{% endif %} alert-dismissible fade show">
                            <i class="fas fa-{% if label == 'success' %}check-circle{% elseif label == 'error' %}exclamation-triangle{% elseif label == 'warning' %}exclamation-circle{% else %}info-circle{% endif %} me-2"></i>
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
                        </div>
                    {% endfor %}
                {% endfor %}

                <div class="card shadow border-0 rounded-lg mb-4">
                    <div class="card-header bg-primary text-white py-3">
                        <h1 class="h3 mb-0"><i class="bi bi-exclamation-triangle-fill me-2"></i>Nouveau signalement</h1>
                    </div>
                    <div class="card-body p-4">
                        {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate', 'id': 'signalements-form'}}) }}
                        <!-- Informations générales -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h5 class="mb-0"><i class="bi bi-info-circle me-2"></i>Informations générales</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    {{ form_label(form.titre, null, {'label_attr': {'class': 'form-label'}}) }}
                                    {{ form_widget(form.titre) }}
                                    <div class="form-text text-danger">
                                        {{ form_errors(form.titre) }}
                                    </div>
                                </div>

                                <div class="mb-3">
                                    {{ form_label(form.description, null, {'label_attr': {'class': 'form-label'}}) }}
                                    {{ form_widget(form.description) }}
                                    <div class="form-text text-danger">
                                        {{ form_errors(form.description) }}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Catégorisation -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h5 class="mb-0"><i class="bi bi-tag me-2"></i>Catégorisation</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        {{ form_label(form.categorie, null, {'label_attr': {'class': 'form-label'}}) }}
                                        {{ form_widget(form.categorie) }}
                                        <div class="form-text text-danger">
                                            {{ form_errors(form.categorie) }}
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        {{ form_label(form.ville, null, {'label_attr': {'class': 'form-label'}}) }}
                                        {{ form_widget(form.ville, {'id': 'ville-select', 'attr': {'class': 'form-select ville-select', 'data-arrondissement-url': path('api_arrondissements_by_ville', {'villeId': '__villeId__'})}}) }}
                                        {{ form_help(form.ville) }}
                                        <div class="form-text text-danger">
                                            {{ form_errors(form.ville) }}
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        {{ form_label(form.arrondissement, null, {'label_attr': {'class': 'form-label'}}) }}
                                        {{ form_widget(form.arrondissement, {'id': 'arrondissement-select', 'attr': {'class': 'form-select arrondissement-select'}}) }}
                                        {{ form_help(form.arrondissement) }}
                                        <div class="form-text text-danger">
                                            {{ form_errors(form.arrondissement) }}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Photo -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h5 class="mb-0"><i class="bi bi-camera me-2"></i>Photo du problème</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    {{ form_label(form.photo, null, {'label_attr': {'class': 'form-label'}}) }}
                                    {{ form_widget(form.photo) }}
                                    <div class="form-text">
                                        <small class="text-muted"><i class="bi bi-info-circle me-1"></i>Formats acceptés: JPG, PNG. Taille maximale: 5Mo</small>
                                    </div>
                                    <div class="form-text text-danger">
                                        {{ form_errors(form.photo) }}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Localisation -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h5 class="mb-0"><i class="bi bi-geo-alt me-2"></i>Localisation du problème</h5>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info mb-3">
                                    <i class="bi bi-info-circle-fill me-2"></i>
                                    Vous pouvez soit cliquer directement sur la carte pour positionner le marqueur, soit utiliser le bouton de géolocalisation, ou encore saisir manuellement les coordonnées.
                                </div>

                                <div id="geolocation-messages" class="mb-3"></div>

                                <div class="d-grid gap-2 d-md-flex justify-content-md-start mb-3">
                                    <button type="button" class="btn btn-primary" id="geolocate-btn">
                                        <i class="bi bi-geo-alt me-2"></i> Utiliser ma position actuelle
                                    </button>
                                </div>

                                <div class="map-container mb-3">
                                    <div id="map"></div>
                                </div>

                                <div class="coordinates-container">
                                    <h6 class="mb-3">Coordonnées manuelles</h6>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="input-group mb-3">
                                                <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                                                <input type="text" id="manual-latitude" class="form-control" placeholder="Latitude (ex: 6.3676953)">
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="input-group mb-3">
                                                <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                                                <input type="text" id="manual-longitude" class="form-control" placeholder="Longitude (ex: 2.3912362)">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                        <button type="button" class="btn btn-secondary" id="apply-coords-btn">
                                            <i class="bi bi-check-circle me-2"></i>Appliquer ces coordonnées
                                        </button>
                                    </div>
                                </div>

                                {# Champs cachés pour les coordonnées #}
                                {{ form_widget(form.latitude, {'attr': {'required': 'required'}}) }}
                                {{ form_widget(form.longitude, {'attr': {'required': 'required'}}) }}
                                <div class="form-text text-danger" id="coordinates-error"></div>
                            </div>
                        </div>

                        <!-- Bouton de soumission -->
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg" id="submit-button">
                                <i class="bi bi-send me-2"></i> Envoyer le signalement
                            </button>
                        </div>

                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Variables globales pour la carte et le marqueur
        let map;
        let marker;
        // Coordonnées par défaut centrées sur le Bénin
        const defaultLat = 9.3077;
        const defaultLng = 2.3158;
        const defaultZoom = 7;

        document.addEventListener('DOMContentLoaded', function() {
            // Vérifier la prise en charge de la géolocalisation
            const geolocateBtn = document.getElementById('geolocate-btn');
            if (geolocateBtn && !navigator.geolocation) {
                geolocateBtn.disabled = true;
                geolocateBtn.title = "Géolocalisation non supportée par votre navigateur";
                geolocateBtn.innerHTML = '<i class="bi bi-geo-alt-fill me-2"></i> Géolocalisation non disponible';
            }

            initMap();
            setupFormHandlers();
            setupManualCoordinates();
            validateFormBeforeSubmit();
            highlightFormErrorsOnSubmit();
        });

        // Fonction pour initialiser la carte
        function initMap() {
            if (document.getElementById('map')) {
                // Créer la carte
                map = L.map('map').setView([defaultLat, defaultLng], defaultZoom);

                // Ajouter la couche OpenStreetMap
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);

                // Ajouter un marqueur à la position par défaut
                marker = L.marker([defaultLat, defaultLng], {
                    draggable: true
                }).addTo(map);

                // Mise à jour des coordonnées lorsque le marqueur est déplacé
                marker.on('dragend', function() {
                    const position = marker.getLatLng();
                    updateCoordinates(position.lat, position.lng);
                    updateManualInputs(position.lat, position.lng);
                });

                // Ajouter un gestionnaire d'événements pour les clics sur la carte
                map.on('click', function(e) {
                    marker.setLatLng(e.latlng);
                    updateCoordinates(e.latlng.lat, e.latlng.lng);
                    updateManualInputs(e.latlng.lat, e.latlng.lng);
                });

                // Initialiser les coordonnées par défaut
                updateCoordinates(defaultLat, defaultLng);
                updateManualInputs(defaultLat, defaultLng);
            }
        }

        // Valider le formulaire avant soumission
        function validateFormBeforeSubmit() {
            const form = document.getElementById('signalements-form');
            const latitudeField = document.getElementById('signalement_type_form_latitude');
            const longitudeField = document.getElementById('signalement_type_form_longitude');
            const errorElement = document.getElementById('coordinates-error');

            if (form) {
                form.addEventListener('submit', function(event) {
                    let isValid = true;

                    // Vérifier les coordonnées
                    if (!latitudeField.value || !longitudeField.value) {
                        event.preventDefault();
                        errorElement.textContent = 'Veuillez définir une position sur la carte';
                        isValid = false;
                    } else {
                        errorElement.textContent = '';
                    }

                    if (!isValid) {
                        // Afficher un message d'erreur général
                        showToast('Veuillez corriger les erreurs du formulaire', 'danger');
                        return false;
                    }

                    return true;
                });
            }
        }

        // Fonction pour faire défiler vers la première erreur
        function highlightFormErrorsOnSubmit() {
            const errorElements = document.querySelectorAll('.form-text.text-danger');

            errorElements.forEach(function(errorElement) {
                if (errorElement.textContent.trim() !== '') {
                    // Faire défiler jusqu'au premier élément avec erreur
                    errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    return;
                }
            });
        }

        // Configurer les entrées de coordonnées manuelles
        function setupManualCoordinates() {
            const applyBtn = document.getElementById('apply-coords-btn');

            if (applyBtn) {
                applyBtn.addEventListener('click', function() {
                    const latInput = document.getElementById('manual-latitude');
                    const lngInput = document.getElementById('manual-longitude');

                    const lat = parseFloat(latInput.value);
                    const lng = parseFloat(lngInput.value);

                    if (!isNaN(lat) && !isNaN(lng)) {
                        // Mettre à jour la carte et le marqueur
                        map.setView([lat, lng], 16);
                        marker.setLatLng([lat, lng]);

                        // Mettre à jour les champs cachés
                        updateCoordinates(lat, lng);

                        // Effacer le message d'erreur éventuel
                        document.getElementById('coordinates-error').textContent = '';
                    } else {
                        showToast("Veuillez entrer des coordonnées valides", "danger");
                    }
                });
            }
        }

        // Mettre à jour les champs manuels
        function updateManualInputs(lat, lng) {
            const latInput = document.getElementById('manual-latitude');
            const lngInput = document.getElementById('manual-longitude');

            if (latInput && lngInput) {
                latInput.value = lat.toFixed(6);
                lngInput.value = lng.toFixed(6);
            }
        }

        // Mettre à jour les champs cachés
        function updateCoordinates(lat, lng) {
            // Arrondir à 6 décimales
            lat = Math.round(lat * 1000000) / 1000000;
            lng = Math.round(lng * 1000000) / 1000000;

            // Mettre à jour les champs cachés du formulaire
            document.getElementById('signalement_type_form_latitude').value = lat;
            document.getElementById('signalement_type_form_longitude').value = lng;

            // Effacer le message d'erreur éventuel
            document.getElementById('coordinates-error').textContent = '';
        }

        // Fonction pour afficher les toasts
        function showToast(message, type = 'info') {
            const container = document.getElementById('geolocation-messages');
            if (!container) return;

            const toast = document.createElement('div');
            toast.className = `alert alert-${type} alert-dismissible fade show`;
            toast.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}-fill me-2"></i>${message}
                <button type="button" class="btn-close" aria-label="Fermer"></button>
            `;

            // Ajouter le gestionnaire d'événements pour fermer manuellement
            const closeButton = toast.querySelector('.btn-close');
            if (closeButton) {
                closeButton.addEventListener('click', function() {
                    toast.remove();
                });
            }

            container.appendChild(toast);

            // Supprimer automatiquement après quelques secondes
            setTimeout(() => {
                toast.remove();
            }, type === 'danger' ? 5000 : 3000);
        }

        // Fonction pour gérer les interactions du formulaire
        function setupFormHandlers() {
            // Gestion du bouton de géolocalisation
            const geolocateBtn = document.getElementById('geolocate-btn');
            if (geolocateBtn) {
                geolocateBtn.addEventListener('click', function() {
                    getMyLocation(this);
                });
            }

            // Gestion de la mise à jour des arrondissements
            const villeSelect = document.getElementById('ville-select');
            if (villeSelect) {
                villeSelect.addEventListener('change', function() {
                    updateArrondissements();
                });

                // Initialiser les arrondissements au chargement si une ville est déjà sélectionnée
                if (villeSelect.value) {
                    updateArrondissements();
                }
            }

            // Gestion de la sélection d'arrondissement pour mettre à jour automatiquement la ville
            const arrondissementSelect = document.getElementById('arrondissement-select');
            if (arrondissementSelect) {
                arrondissementSelect.addEventListener('change', function() {
                    if (this.value) {
                        // Récupérer l'arrondissement sélectionné et sa ville associée
                        fetch(`/api/api/arrondissement/${this.value}`)
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(`Erreur réseau: ${response.status}`);
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.ville && data.ville.id) {
                                    // Mettre à jour le select de ville
                                    villeSelect.value = data.ville.id;
                                }
                            })
                            .catch(error => {
                                showToast(`Erreur lors de la récupération de l'arrondissement: ${error.message}`, 'danger');
                                console.error('Erreur lors de la récupération des informations de l\'arrondissement:', error);
                            });
                    }
                });
            }
        }

        // Fonction pour mettre à jour les arrondissements
        function updateArrondissements() {
            const villeSelect = document.getElementById('ville-select');
            const arrondissementSelect = document.getElementById('arrondissement-select');

            if (!villeSelect || !arrondissementSelect) return;

            const villeId = villeSelect.value;

            // Désactiver le select d'arrondissement pendant le chargement
            arrondissementSelect.disabled = true;

            if (villeId) {
                // Afficher un indicateur de chargement
                arrondissementSelect.innerHTML = '<option value="">Chargement en cours...</option>';

                // Utiliser l'URL de l'API correcte
                const url = `/api/arrondissements-by-ville/${villeId}`;

                // Faire une requête AJAX pour obtenir les arrondissements de la ville sélectionnée
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erreur réseau: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Vider le select d'arrondissement
                        arrondissementSelect.innerHTML = '<option value="">Sélectionnez un arrondissement (optionnel)</option>';

                        // Ajouter les nouveaux arrondissements
                        data.forEach(arrondissement => {
                            const option = document.createElement('option');
                            option.value = arrondissement.id;
                            option.textContent = arrondissement.nom;
                            arrondissementSelect.appendChild(option);
                        });

                        // Réactiver le select d'arrondissement
                        arrondissementSelect.disabled = false;
                    })
                    .catch(error => {
                        showToast(`Erreur lors du chargement des arrondissements: ${error.message}`, 'danger');
                        console.error('Erreur lors du chargement des arrondissements:', error);
                        arrondissementSelect.innerHTML = '<option value="">Erreur de chargement</option>';
                        arrondissementSelect.disabled = false;
                    });
            } else {
                // Si aucune ville n'est sélectionnée, vider le select d'arrondissement
                arrondissementSelect.innerHTML = '<option value="">Sélectionnez d\'abord une ville</option>';
                arrondissementSelect.disabled = true;
            }
        }

        // Fonction pour la géolocalisation
        function getMyLocation(button) {
            // Afficher un indicateur de chargement
            const originalText = button.innerHTML;
            button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Localisation en cours...';
            button.disabled = true;

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    // Succès
                    function(position) {
                        const latitude = position.coords.latitude;
                        const longitude = position.coords.longitude;

                        // Mettre à jour les champs cachés
                        updateCoordinates(latitude, longitude);
                        updateManualInputs(latitude, longitude);

                        // Mettre à jour la carte et le marqueur
                        if (map && marker) {
                            map.setView([latitude, longitude], 16);
                            marker.setLatLng([latitude, longitude]);
                        }

                        // Réinitialiser le bouton
                        button.innerHTML = originalText;
                        button.disabled = false;

                        // Notification de succès avec toast
                        showToast('Position GPS récupérée avec succès !', 'success');
                    },
                    // Erreur
                    function(error) {
                        let errorMessage;
                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage = "Vous avez refusé l'accès à votre position.";
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage = "Votre position n'est pas disponible.";
                                break;
                            case error.TIMEOUT:
                                errorMessage = "La demande de position a expiré.";
                                break;
                            case error.UNKNOWN_ERROR:
                                errorMessage = "Une erreur inconnue est survenue.";
                                break;
                        }

                        // Réinitialiser le bouton
                        button.innerHTML = originalText;
                        button.disabled = false;

                        // Afficher l'erreur avec un toast
                        showToast(`Erreur de géolocalisation : ${errorMessage}`, 'danger');
                    },
                    // Options
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 0
                    }
                );
            } else {
                // Réinitialiser le bouton
                button.innerHTML = originalText;
                button.disabled = false;

                // Afficher l'erreur
                showToast("La géolocalisation n'est pas supportée par votre navigateur.", 'danger');
            }
        }

        // Initialiser Bootstrap pour les fermetures d'alerte
        document.addEventListener('DOMContentLoaded', function() {
            // Gestionnaire pour les boutons de fermeture des alertes
            document.querySelectorAll('.btn-close').forEach(button => {
                button.addEventListener('click', function() {
                    const alert = this.closest('.alert');
                    if (alert) {
                        alert.remove();
                    }
                });
            });
        });
    </script>
    <script>
document.addEventListener('DOMContentLoaded', function() {
    const villeSelect = document.querySelector('.ville-select');
    const arrondissementSelect = document.querySelector('.arrondissement-select');

    if (villeSelect && arrondissementSelect) {
        function updateArrondissements() {
            const villeId = villeSelect.value;

            if (!villeId) {
                arrondissementSelect.innerHTML = '<option value="">Choisissez un arrondissement (optionnel)</option>';
                arrondissementSelect.disabled = true;
                return;
            }

            // Récupérer l'URL depuis l'attribut data
            const url = villeSelect.getAttribute('data-arrondissement-url').replace('__villeId__', villeId);

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    arrondissementSelect.innerHTML = '<option value="">Choisissez un arrondissement (optionnel)</option>';
                    arrondissementSelect.disabled = false;

                    data.forEach(arr => {
                        const option = document.createElement('option');
                        option.value = arr.id;
                        option.textContent = arr.nom;
                        arrondissementSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Erreur:', error));
        }

        villeSelect.addEventListener('change', updateArrondissements);

        // Initialiser les arrondissements si une ville est déjà sélectionnée
        if (villeSelect.value) {
            updateArrondissements();
        }
    }
});
</script>
{% endblock %}